{"meta":{"title":"Coding...Coding...","subtitle":"个人博客","description":"这是我的个人博客","author":"KingIsHappy","url":"https://blueleer.github.io"},"pages":[{"title":"about","date":"2018-04-07T04:57:35.000Z","updated":"2018-04-07T05:26:33.518Z","comments":true,"path":"about/index.html","permalink":"https://blueleer.github.io/about/index.html","excerpt":"","text":"QQ : 251668577WeChat : LeeWangJJ"},{"title":"","date":"2018-04-04T19:57:24.000Z","updated":"2018-04-06T13:14:59.072Z","comments":false,"path":"categories/index.html","permalink":"https://blueleer.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-04-06T13:14:06.586Z","updated":"2018-04-06T13:14:06.586Z","comments":false,"path":"tags/index.html","permalink":"https://blueleer.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hibernate学习笔记","slug":"Hibernate学习笔记","date":"2018-04-08T15:57:47.000Z","updated":"2018-04-09T03:31:39.630Z","comments":true,"path":"2018/04/08/Hibernate学习笔记/","link":"","permalink":"https://blueleer.github.io/2018/04/08/Hibernate学习笔记/","excerpt":"","text":"Hibernate学习内容: Hibernate相关jar包的依赖 创建表和实体之间的映射配置文件Student.hbm.xml 1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!--指定命名空间,从hibernate-core-5.2.16.Final包中找--&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping package=\"com.lee.hibernate1.domain\"&gt; &lt;class name=\"Student\" table=\"student\"&gt; &lt;id name=\"sid\" column=\"sid\"&gt; &lt;!--主键自增长,使用数据库本地的自增长能力--&gt; &lt;generator class=\"native\"&gt;&lt;/generator&gt; &lt;/id&gt; &lt;property name=\"name\" column=\"sname\"&gt;&lt;/property&gt; &lt;property name=\"sex\" column=\"ssex\"&gt;&lt;/property&gt; &lt;property name=\"age\" column=\"sage\"&gt;&lt;/property&gt; &lt;property name=\"address\" column=\"saddress\"&gt;&lt;/property&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; ​ 创建hibernate.cfg.xml配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!--导入约束文件文件 ,从从hibernate-core-5.2.16.Final包中找到--&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;&lt;hibernate-configuration&gt; &lt;!--配置SessionFactory,它是数据库连接的会话对象,它是执行CRUD的对象--&gt; &lt;!--创建SessionFactory对象的三部分必须配置: 1.第一部分: 连接数据库的信息 2.第二部分 hibernate的可选配置 3.第三部分 映射配置文件的位置 --&gt; &lt;session-factory&gt; &lt;!--第一部分--&gt; &lt;!--JDBC驱动--&gt; &lt;property name=\"hibernate.connection.driver_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt; &lt;!--连接数据库的url--&gt; &lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql://localhost:3306/hibernate&lt;/property&gt; &lt;!--数据库的用户名--&gt; &lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt; &lt;!--登录数据库的密码--&gt; &lt;property name=\"hibernate.connection.password\"&gt;123&lt;/property&gt; &lt;!--#hibernate.dialect org.hibernate.dialect.MySQLDialect--&gt; &lt;!--&amp;lt;!&amp;ndash;配置数据库方言&amp;ndash;&amp;gt;--&gt; &lt;!--&lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQL5Dialect&lt;/property&gt;--&gt; &lt;!--第二部分--&gt; &lt;!--是否在控制台显示生成的sql语句--&gt; &lt;property name=\"hibernate.show_sql\"&gt;true&lt;/property&gt; &lt;!--是否将控制台里的sql语句格式化输出--&gt; &lt;property name=\"hibernate.format_sql\"&gt;true&lt;/property&gt; &lt;!--采用何种方式生成DDL语句--&gt; &lt;!--其中update表示:检测实体类和表结构是否一致,如果不一致,更新表结构达到一致,如果不存在该表,就创建一张表--&gt; &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt; &lt;!--第三部分--&gt; &lt;!--指定映射的bean配置文件的位置--&gt; &lt;!--如果有多个,就配置多个--&gt; &lt;mapping resource=\"com/lee/hibernate1/Student.hbm.xml\"/&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt; ​ 使用hibernate向数据库中插入数据的小练习 1234567891011121314151617181920212223public void test1() &#123; Student student = new Student(); student.setName(\"Lee\"); student.setAddress(\"安康市\"); student.setSex(\"男\");// 1. 解析主配置文件 Configuration configuration = new Configuration(); configuration.configure(); // 配置默认的配置文件,即为根目录下的hibernate.cfg.xml文件// 2.根据主配置文件,创建SessionFaction对象 SessionFactory factory = configuration.buildSessionFactory();// 3.创建Session Session session = factory.openSession();// 4.开启事务 Transaction transaction = session.beginTransaction();// 5.执行插入 session.save(student);// 6.提交事务 transaction.commit();// 7.释放资源 session.close(); factory.close(); &#125; Configuration配置配置文件 一般在hibernate.cfg.xml中配置的东西,在该对象中都是可以配置的,但是不推荐这么做,硬编码,后期维护升级很费事 SessionFactory 该对象在服务器启动(应用启动)的时候创建,在服务器关闭(应用卸载)的时候销毁,一个应用只存在一个实例 它是线程安全的 在创建SessionFactory以后对配置文件进行更改,将不会影响到该factory Session 一个线程只有一个对象 TransactionHibernate工具类Hibernate中CRUD操作Hibernate中的异常处理HibernateException继承了RuntimeException,这个异常可以不用捕获 Hibernate中配置c3p0连接池F:\\java资料\\SSH框架\\hibernate-release-5.2.16.Final\\project\\etc/hibernate.properties文件中查找配置格式(搜索c3p0) Hibernate中查询的get和load方法的区别查询时机不同,返回查询的结果不一样 get:立即加载 load:延迟加载(懒加载,惰性加载),返回的对象是增强对象(动态代理),增强了toString()方法;他也可以通过配置的方式改为立即加载 学习中遇到的问题及其结局方案: 使用的MySQL版本为5.5,使用Hibernate的版本为5.2.16,在配置hibernate.cfg.xml的时候12&lt;!--配置数据库方言--&gt;&lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQL5Dialect&lt;/property&gt; 在MySQL版本为5.5及以上时,如果配置数据库方言,将org.hibernate.dialect.MySQLDialect改为上面的 org.hibernate.dialect.MySQL5Dialect 不然在hibernate创建表格的时候会报错. 或者这个配置项直接不配置也是可以的","categories":[],"tags":[{"name":"学习日记","slug":"学习日记","permalink":"https://blueleer.github.io/tags/学习日记/"},{"name":"错误解决","slug":"错误解决","permalink":"https://blueleer.github.io/tags/错误解决/"}]},{"title":"SSH框架学习之Struts2--第一天","slug":"SSH框架学习之Struts2-第一天","date":"2018-04-08T05:10:07.000Z","updated":"2018-04-08T08:30:50.604Z","comments":true,"path":"2018/04/08/SSH框架学习之Struts2-第一天/","link":"","permalink":"https://blueleer.github.io/2018/04/08/SSH框架学习之Struts2-第一天/","excerpt":"","text":"","categories":[{"name":"Java","slug":"Java","permalink":"https://blueleer.github.io/categories/Java/"}],"tags":[{"name":"Struts2","slug":"Struts2","permalink":"https://blueleer.github.io/tags/Struts2/"}]},{"title":"回车和换行","slug":"回车和换行","date":"2018-04-07T03:43:40.000Z","updated":"2018-04-07T17:06:23.583Z","comments":true,"path":"2018/04/07/回车和换行/","link":"","permalink":"https://blueleer.github.io/2018/04/07/回车和换行/","excerpt":"","text":"今天在做爬虫的时候,需要匹配下面Title中的内容,发现写的正则表达式question_link(.)&gt;(\\n)(.+)(\\n*)&lt;竟然匹配不上里面的中文,原来在win系统中文件中的换行其实包含了两个字符, /CR(回车),/LF(换行),这两个”.”都是匹配不上的. 123&lt;h2&gt;&lt;a class=\"question_link\" href=\"/question/270597366/answer/355546388\" data-id=\"22407872\" data-za-element-name=\"Title\"&gt;如何看待星巴克被指含有致癌物质（丙烯酰胺Acrylamide）？&lt;/a&gt;&lt;/h2&gt; 修改成下面,成功匹配 1question_link(.*)&gt;(\\r)(\\n)(.*) 完整代码为: 1234567891011121314// 其中这段是从文件中摘录的,文件中查看特殊符号显示了换行包含两个字符 一个回车一个换行String s = \"&lt;h2&gt;&lt;a class=\"question_link\" href=\"/question/270597366/answer/355546388\" data-id=\"22407872\" data-za-element-name=\"Title\"&gt;如何看待星巴克被指含有致癌物质（丙烯酰胺Acrylamide）？&lt;/a&gt;&lt;/h2&gt;\" String regex = \"question_link(.*)&gt;(\\\\r)(\\\\n)(.*)\";Pattern pattern = Pattern.compile(regex);Matcher matcher = pattern.matcher(sb.toString());matcher.find();String group = matcher.group(4);System.out.println(group);// 输出:// 如何看待星巴克被指含有致癌物质（丙烯酰胺Acrylamide）？ 小示例: 123456789String s1 = \"\\r1234\\r567\";String s2 = \"\\n12345\";System.out.println(s1);System.out.println(s2);// 输出:56712345 再次强调,回车和换行,”.”都不能匹配 1234567String s1 = \"\\r1234\\r567\";String regex = \".*\";String regex1 = \"\\\\r.*\";Pattern pattern = Pattern.compile(regex1); // 换成regex则下面的输出为空,也就是不能匹配Matcher matcher = pattern.matcher(s1);matcher.find();System.out.println(matcher.group()); 更多知识请参考: 终于搞懂了回车与换行的区别","categories":[{"name":"其他","slug":"其他","permalink":"https://blueleer.github.io/categories/其他/"}],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://blueleer.github.io/tags/计算机/"},{"name":"其他","slug":"其他","permalink":"https://blueleer.github.io/tags/其他/"}]},{"title":"hexo主题之next主题的配置","slug":"hexo主题之next主题的配置","date":"2018-04-06T13:46:36.000Z","updated":"2018-04-06T15:48:33.471Z","comments":true,"path":"2018/04/06/hexo主题之next主题的配置/","link":"","permalink":"https://blueleer.github.io/2018/04/06/hexo主题之next主题的配置/","excerpt":"","text":"关于 hexo 主题之next主题 GiuHub地址 Next主题配置官网文档 hexo的next主题个性化教程:打造炫酷网站 另外附上大致的使用GitHub Pages建站的流程: 注册GitHub账号 创建 YourName.github.io库,GitHub默认把它当做静态html托管仓库(我们实际上也仅仅是在它上面托管我们的静态网页,它还能够识别解析css和js文件) 在GitHub上生成 SSH Keys (后面使用的hexo在本地拥有了一个SSH Keys的拷贝,这样就可以实现快速部署到pages仓库) 安装hexo,推荐参考 hexo官方文档 这样可以少走很多弯路,遇到问题了再去查解决方法 然后就可以找一款自己喜欢的主题啦 hexo官网,这上面有很全的plug插件和theme主题,也可以参考别人的推荐,我就用的是GitHub上star数醉的的一款next","categories":[{"name":"其他","slug":"其他","permalink":"https://blueleer.github.io/categories/其他/"}],"tags":[{"name":"hexo主题配置","slug":"hexo主题配置","permalink":"https://blueleer.github.io/tags/hexo主题配置/"}]},{"title":"Java中的Pattern、Matcher、常用的正则表达式","slug":"Java中的Pattern、Matcher、常用的正则表达式","date":"2018-04-06T08:20:55.000Z","updated":"2018-04-06T08:23:37.992Z","comments":true,"path":"2018/04/06/Java中的Pattern、Matcher、常用的正则表达式/","link":"","permalink":"https://blueleer.github.io/2018/04/06/Java中的Pattern、Matcher、常用的正则表达式/","excerpt":"","text":"Java中的Pattern、Matcher、常用的正则表达式Java中的字符串已经有了直接调用简单匹配方法,matches方法(内部也是使用了Pattern.matches()方法) 123456String s = \"Java12Java34\";// 精确匹配,返回regex和s串是否完全匹配boolean isMatch = s.matches(\"Java\"); // 这里返回false// 在一定的范围内进行匹配// 参数的含义: 是否忽略大小写,s串的起始位置(offset),regex字符串,regex字符串的起始位置,取regex串的长度boolean isMatch2 = s.regionMatches(true, 6, \"Java\", 0, \"Java\".length()); // 返回true 但是很多时候String自带的这些方法不足于我们使用,此时Java中提供了Pattern和Matcher两个与正则表达式相关的类供我们使用 Pattern类12String regex = \"Java\";Pattern pattern = Pattern.compile(regex); Pattern.matches()静态方法123String regex = \"Java\";String s2 = \"Java123Java456Java789\";Pattern.matches(\"Java\", s2); // 注意这里也是全串精确匹配 其实这个方法和String中的matches()方法一致,其实String.matches()方法内部就是调用了此方法 split顾名思义就是分割字符串的方法,其中regex就是分割字符串的”刀”,注意当regex和字符串开始或者结尾部分匹配的时候会得到空字符串 123456789101112String regex = \"Java\";String s2 = \"Java123Java456Java789\";Pattern pattern = Pattern.compile(\"Java\");// split(input),分割字符串得到String数组String[] split = pattern.split(s2);System.out.println(split.length); // 输出3,[空串,123,456,789]String[] split1 = pattern.split(regex, 2);System.out.println(\"split1的长度为 : \" + split1.length); // 输出2,[空串,123Java456Java789],想想limit设置成3会怎样?// 注意:limit设置成0或者负数,效果默认一样,也就是和pattern.split(s2)一样 关于Pattern只介绍这两个方法,其他的可以自行创建demo试试 Matcher类1234String regex = \"Java\";String s = \"Java123Java456Java789\";Pattern pattern = Pattern.compile(regex);Matcher matcher1 = pattern.matcher(s); find()：尝试查找与该模式匹配的输入序列的的下一个子序列。重要,下面重点说 find(int start)：重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。 group()：匹配成功返回的组,重要,下面重点说 start()：返回先前匹配的起始位置的索引。 end()：返回最后匹配字符的索引加一。 matches()：尝试将整个区域与模式匹配。匹配成功返回true lookingAt()：尝试将从区域开头开始的输入序列与该模式匹配。 replaceFirst()：替换掉匹配的第一个子序列 replaceAll()：替换掉匹配的全部子序列 appendReplacement：重要，下面重点说 appendTail(StringBuffer buf)：重要，下面重点说 reset():重置匹配器,从起始位置重新开始 reset(CharSequence input):重置匹配器,放入新的待匹配的串 部分方法解析 find()方法 注意:该方法尝试查找与该模式匹配的输入序列的下一个子序列.此方法从匹配器区域的开头开始，如果该方法的前一次调用成功了,并且从那时开始匹配器没有被重置，则从以前匹配操作没有匹配的第一个字符开始 12345678910111213String regex = \"Java.\";String s = \"Java1Java2\";Pattern pattern = Pattern.compile(regex);Matcher matcher1 = pattern.matcher(s);matcher1.find(); // 这里返回true// 其实此时我们可以使用下面的方式来循环获取匹配得到的子串while(matcher.find)&#123; // 循环查找,本次查找结束了,下次如果想获得查找结果应该重新执行find()方法 System.out.println(matcher.group()); // 关于group方法将在下面介绍&#125;// 上面的方法输出:Java1Java2 group()方法 这里介绍下组的概念：组是用括号划分的正则表达式，可以根据组的编号来引用这个组。组号为0表示整个表达式，组号为1表示被第一对括号括起的组，依次类推，例如A(B(C))D，组0是ABCD，组1是BC，组2是C。 Matcher类提供了start()，end()，group()分别用于返回字符串的起始索引，结束索引，以及匹配到到的字符串。 12345678String regex = \"(Java).*(Java)\";String s = \"Java123Java456\";Pattern pattern = Pattern.compile(regex);Matcher matcher2 = pattern.matcher(s);matcher2.find(); // 注意,这里需要先执行find方法System.out.println(matcher2.group()); // 如果find()方法执行返回true,则group()或者group(0)代表整个字符串s:Java123Java456System.out.println(matcher2.group(1)); // 输出 Java123System.out.println(matcher2.group(2)); // 输出Java456 appendReplacement(StringBuffer sb,String replacement)方法 先从字符串中执行查找,查找到了,替换成replacement,并从开始匹配的位置处将字符串写入StringBuffer中,示例入下: 12345678910111213141516171819String s = \"2018-4-10 15-45-30\";String regex = \"-\";Pattern pattern = Pattern.compile(regex);Matcher matcher = pattern.matcher(s);StringBuffer sb = new StringBuffer();matcher.find();matcher.appendReplacement(sb, \":\");System.out.println(sb.toString());matcher.find();matcher.appendReplacement(sb, \":\");System.out.println(sb.toString());matcher.find();matcher.appendReplacement(sb, \":\");System.out.println(sb.toString());输出入下:2018:2018:4:2018:4:10 15: 可以看到,它比String的replaceAll()或者replace()方法更加灵活 正则表达式语法请参考 Java 正则表达式","categories":[{"name":"Java","slug":"Java","permalink":"https://blueleer.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://blueleer.github.io/tags/Java/"},{"name":"Java正则表达式","slug":"Java正则表达式","permalink":"https://blueleer.github.io/tags/Java正则表达式/"}]},{"title":"Git版本控制工具的简单使用","slug":"Git版本控制工具的简单使用","date":"2016-11-07T14:08:04.000Z","updated":"2018-04-07T17:02:45.970Z","comments":true,"path":"2016/11/07/Git版本控制工具的简单使用/","link":"","permalink":"https://blueleer.github.io/2016/11/07/Git版本控制工具的简单使用/","excerpt":"","text":"虽然在Windows系统上安装的Git是可以在图形界面上进行操作的,但是我们并不应该这么做,Git的各种命令才是我们应该掌握的,而且将来我们不管换成什么样的操作系统,使用Git命令来操作都是通用的 1. 创建代码仓库初次打开Bash的时候我们应该配置身份 12git confing --global user.name \"yourname\"git confing --global user.email \"your email address\" 然后切换到你要上传到github的项目的根目录下,例如下面这个项目: 12cd f:cd android/BroadcastTest/ 然后输入下面的命令: 1git init 这样会在BroadcastTest目录下生成一个 .git 文件夹 2. 提交本地代码123git add AndroidManifest.xml # 将AndroidManifest.xml文件添加进本地仓库git add src # 将src目录添加进本地仓库git add . # 添加所有的文件到本地仓库 上面的添加只是将文件/文件夹添加到本地仓库,并没有提交: 1git commit -m \"first commit\" # 其中\"first commit\"是本次提交的描述,建议加上此次提交的描述,将来我们可以很方便的看到提交了什么 3. 忽略文件我们提交的时候,并不是该项目下所有的文件都得提交,例如 .idea 文件夹是不需要提交的,它是IDE自动生成的,那么怎么忽略掉这些文件呢? 第一步: 在BroadcastTest目录下创建 .gitignore文件 注意可能你在创建该文件的时候提示你”必须键入文件名,解决方法是: 在项目根目录下面创建gitignore.txt文件 把你需要排除的文件名保存到gitignore.txt文件 在项目根目录下面按住Shift键并鼠标右键选择“在此处打开命令窗口” 执行命令 ren gitignore.txt .gitignore 第二步:编辑.gitignore文件,将你想要忽略提交的文件或者文件夹加入 例如: 123bin/gen/*.html # 忽略所有的html文件,其中 \"*\" 为通配符,表示任意多个字符, \"?\" 代表一个字符, 方括号 [abc]代表可选字符范围 编辑好上面的.gitignore文件以后,执行 git add .就会自动将匹配上的文件或者文件夹忽略,然后执行 git commit -m &quot;Second commit with ignore&quot; 大功告成! 4. 查看修改内容在项目的开发阶段我们经常提交代码到仓库,理想的情况是每当完成了一小块功能的时候,就执行一次提交.当某个功能修改比较多的时候,写到后面可能我们已经忘记了本次到底修改了什么内容了,此时Git在帮你记着. git status 查看本次更改的概况 git diff src/lee/com/broadcasttest/Main.java 查看某个文件具体修改的内容,其中,减号代表删除的内容,加号代表添加的内容 5. 撤销未提交的修改每次完成一个功能以后,都会先执行 add命令添加进本地仓库 本次代码修改以后,只要未提交(也就是未执行add命令),都可以运行 git checkout src/lee/com/broadcasttest/Main.java 来撤销更改 上面的命令只能针对那些没有执行过add命令的文件有效,当某个文件已经add过了,此时需要先对其进行取消添加 git reset HEAD src/lee/com/broadcast/Main.java,然后在执行上面的 git checkout src/lee/com/broadcasttest/Main.java命令 6. 查看提交记录git log 当我们的提交较多的时候,可以指定该记录的id: git log 提交记录的id -1(注意这里要添加上-1) 在命令中添加-p参数,查看该条记录具体修改的内容: git log 提交记录的id -1 -p 7. 分支的用法git branch -a 查看当前的版本库中有哪些分支,版本库创建的时候默认只有一个分支 master git branch version1.0 创建一个名为 version1.0 的分支,虽然此时创建了一个新的分支version1.0,但是当前你所在的分支依然是master,使用下面的命令进行切花分支 git checkout version1.0 切换到version1.0的分支上 当你想把version1.0分支上所做的修改合并到master分支上,使用下面的命令进行 123git checkout master # 先切换到master分支上git merge version1.0 # 合并merge分支上的修改到master分支上,此时version1.0分支上的代码不会受到影响 # 另外,合并分支的时候可能会出现代码冲突的情况,此时应该慢慢查找那些冲突的代码,git 无力帮助我们 git branch -D version1.0 删除version1.0的分支 8. 与远程版本库协作上面的操作都是在本地完成的,只适合个人作为项目版本的控制方法 所有的版本控制工具最重要的一个特点就是可以使用它来进行团队合作开发,每个人的电脑上都会有一份代码,当团队的某个成员在自己的电脑上编写完成了某个功能后,就将代码提交到服务器,其他的成员只需要将服务器上的代码同步到本地,就能保证整个团队所有人的代码都相同.这样的话,每个成员就可以各司其职,完成每个人负责的模块,这样就可以共同完成一个庞大的项目. 现在,项目负责人在Git上创建了一个项目,项目地址为:https://github.com/BlueLeer/Crawler 将代码下载到本地: 1git clone https://github.com/BlueLeer/Crawler.git 之后,当你在这份代码的基础上完成了一些修改,使用下面的命令将本地修改的内容同步到版本库: 1git push origin master # 注意:该命令应该在上面本地代码根目录上执行,origin指的是远程Git地址,master指的是master分支,当然也可以是其他的分支 团队的其他成员对Git版本库中的代码也进行了修改,我们应该要养成经常从版本库中获取最新代码的习惯,那么怎么讲远程版本库中的修改同步到本地呢?使用下面的命令: 123git fetch origin master # fetch意为获取之意,但是注意:同步下来的代码并不会合并到本地的任何分支上,而是会存放在一个 origin/master# 分支上,此时可以先调用 git diff origin/master 查看远程版本库中到底修改了什么内容 之后调用 merge命令将origin/master分支上的修改合并到本地的master分支上即可: 1git merge origin/master 推荐使用上面的方法,当然下面的方法更简单,一步到位,那就是pull命令了,它其实相当于将fetch和merge两个命令放在一起执行了,它从远程的版本苦衷获取罪行的代码并合并到本地: 1git pull origin master 9.上传本地项目参考:github入门到上传本地项目","categories":[{"name":"其他","slug":"其他","permalink":"https://blueleer.github.io/categories/其他/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://blueleer.github.io/tags/GitHub/"}]},{"title":"在活动中使用菜单Menu和PopupMenu","slug":"在活动中使用菜单Menu和PopupMenu","date":"2016-11-01T15:55:32.000Z","updated":"2018-04-06T16:05:39.468Z","comments":true,"path":"2016/11/01/在活动中使用菜单Menu和PopupMenu/","link":"","permalink":"https://blueleer.github.io/2016/11/01/在活动中使用菜单Menu和PopupMenu/","excerpt":"","text":"在Activity中使用Menu和PopupMenu流程: 点击res目录新建Android resouce file文件,选择resoucetype为menu,然后可以创建如下菜单的布局: 12345678&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:id=\"@+id/refresh_item\" android:title=\"刷新\"/&gt; &lt;item android:id=\"@+id/change_city\" android:title=\"选择城市\"/&gt;&lt;/menu&gt; 然后在活动中重写onCreateOptionsMenu(Menu menu)方法: 12345public boolean onCreateOptionsMenu(Menu menu) &#123; //R.menu.menu就是menu的布局文件 getMenuInflater().inflate(R.menu.menu,menu); return true;&#125; ​ 然后在手机上点击”菜单”就可以弹出菜单了,该菜单是从屏幕底部弹出的. 当然我们也可以为点击菜单上的项目注册响应事件,通过重写onOptionsItemSelected()方法: 1234567891011public boolean onOptionsItemSelected(MenuItem item) &#123; switch(item.getItemId())&#123; case R.id.refresh_item: //加入逻辑 break; case R.id.change_city: //加入逻辑 break; &#125; return super.onOptionsItemSelected(item);&#125; 有时候我们希望通过点击屏幕上自己定义的一个组件弹出一个菜单来,并且这个菜单就在这个组件的周围,那么可以这么来写(还是使用刚刚我们定义的menu布局文件): 12345678910Button button = (Button)findViewById(R.id.refresh);//点击这个按钮就能弹出一个菜单来button.setOnClickListener(new View.OnClickListener()&#123; @Override public void onClick(View view) &#123; PopupMenu popupMenu = new PopupMenu(MainActivity.this,view); popupMenu.getMenuInflater().inflate(R.menu.menu,popupMenu.getMenu()); popupMenu.show(); &#125;&#125;); ​ ​ 在刷新按钮的周围弹出了一个菜单 ​ 当然我们也可以为PopupMenu响应点击事件: 12345678910popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() &#123; @Override public boolean onMenuItemClick(MenuItem menuItem) &#123; switch(menuItem.getId())&#123; case R.id.refresh_item //加入自己的逻辑(点击以后发生的事件) &#125; return false; &#125;&#125;);","categories":[{"name":"Android","slug":"Android","permalink":"https://blueleer.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://blueleer.github.io/tags/Android/"}]}]}